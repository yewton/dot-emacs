#+STARTUP: showall
* セットアップに必要最低限の設定

** マクロ定義
*** my-define-keys
キー定義のヘルパーマクロ。

このマクロがどのように展開されるのかは、以下のようにして知ることができる。
(ちなみに、以下の展開結果の注釈は =[[elisp:(describe-function%20'lispxmp)][lispxmp]]= を使った)。

#+BEGIN_SRC emacs-lisp :tangle no
(macroexpand '(my-define-keys helm-gtags-mode-map
                             ((kbd "C-c t") 'helm-gtags-find-tag)
                             ((kbd "M-.")   'helm-gtags-find-tag)))
;; => (progn
;;      (define-key helm-gtags-mode-map
;;        (kbd "C-c t")
;;        'helm-gtags-find-tag)
;;      (define-key helm-gtags-mode-map
;;        (kbd "M-.")
;;        'helm-gtags-find-tag))
#+END_SRC

**** 参考
- [[http://hke7.wordpress.com/2011/11/15/define-key-%25E3%2582%2584-global-set-key-%25E3%2582%2592%25E3%2581%25BE%25E3%2581%25A8%25E3%2582%2581%25E3%2582%258B/][define-key や global-set-key をまとめる | less ~/.emacs.d/init.el]]
- =[[elisp:(describe-function%20'ensime-define-keys)][ensime-define-keys]]=

#+BEGIN_SRC emacs-lisp :padline no
;;; -*- coding: utf-8; lexical-binding: t -*-
(defmacro my-define-keys (keymap &rest key-command)
  "特定のキーマップをまとめて設定する。

;; 改善前
(define-key any-mode-map (kbd \"C-x\") 'any-function)
(define-key any-mode-map (kbd \"M-a\") 'hoge-function)

;; 改善後
(my-define-keys any-mode-map
  ((kbd \"C-x\") 'any-function)
  ((kbd \"M-a\") 'hoge-function))"
  `(progn . ,(mapcar (lambda (k-c) `(define-key ,keymap . ,k-c))
                     key-command)))
#+END_SRC

*** my-global-set-keys
=global-set-key= の複数対応版。

#+BEGIN_SRC emacs-lisp
(defmacro my-global-set-keys (&rest key-command)
  "`global-set-key'をまとめて設定する。
詳細については`my-define-keys'を参照。"
  `(my-define-keys global-map . ,key-command))
#+END_SRC

*** my-fpath-ued
=user-emacs-directory= 以下のファイルパスを取得する。

#+BEGIN_SRC emacs-lisp
(defmacro my-fpath-ued (filename)
  `(expand-file-name ,filename ,user-emacs-directory))
#+END_SRC

*** my-dpath-ued
=user-emacs-directory= 以下のディレクトリパスを取得する。

#+BEGIN_SRC emacs-lisp
(defmacro my-dpath-ued (dirname)
  `(my-fpath-ued (file-name-as-directory ,dirname)))
#+END_SRC

*** my-expand-dir-name
=expand-file-name= に渡されるパス名に =file-name-as-directory= を付与する。

#+BEGIN_SRC emacs-lisp
(defmacro my-expand-dir-name (dirname &optional default)
  `(expand-file-name (file-name-as-directory ,dirname) ,default))
#+END_SRC

*** my-add-to-list
=add-to-list= の複数対応版。

#+BEGIN_SRC emacs-lisp
(defmacro my-add-to-list (list-var &rest elems)
  `(progn ,@(mapcar (lambda (e) `(add-to-list ,list-var ,e)) elems)))
#+END_SRC

*** my-add-to-load-path
=load-path= に複数パスを追加する。

#+BEGIN_SRC emacs-lisp
(defmacro my-add-to-load-path (&rest paths)
  `(progn ,@(mapcar (lambda (p) `(add-to-list 'load-path (file-name-as-directory ,p))) paths)))
#+END_SRC

** 関数定義
*** my-exec-path-from-shell-path
Mac OSX 用に、shell から =exec-path= を設定するためのもの。

package で [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] という同様の機能を持つものを入れられるが、
そもそも package の実行時に =exec-path= を設定していないと
パッケージのビルドができなかったりする場合があるため、
なによりも先に実行するために独自定義している。

**** 注意
例えば、ログインシェルとして zsh を使っていて、
=.zshrc= で自動的に tmux セッションにアタッチするような設定にしていると、
なにも対策せずに =exec-path-from-shell= しようとした場合、
tmux セッションにアタッチしようとして失敗し、変な文字列が =exec-path= に入ってしまう。

Emacs から shell を実行する場合には =TERM= が =dumb= になるので、
その場合は余計なことをしないように、きちんと場合分けする必要がある。

**** 参考
- [[http://qiita.com/catatsuy/items/3dda714f4c60c435bb25][EmacsでPATHの設定が引き継がれない問題をエレガントに解決する - Qiita {キータ}]]
- [[http://shibayu36.hatenablog.com/entry/2012/08/13/214611][emacsにおける$PATHの話 - $shibayu36->blog;]]

#+BEGIN_SRC emacs-lisp
(defun my-set-exec-path-from-shell-PATH ()
  "Set up Emacs' `exec-path' and PATH environment variable to match that used by the user's shell.

This is particularly useful under Mac OSX, where GUI apps are not started from a shell."
  (interactive)
  (let ((path-from-shell (replace-regexp-in-string "[ \t\n]*$" "" (shell-command-to-string "$SHELL --login -i -c 'echo $PATH'"))))
    (setenv "PATH" path-from-shell)
    (setq exec-path (split-string path-from-shell path-separator))))
#+END_SRC

** 変数定義
*** 基本的なディレクトリ構造定義
[[http://www.pathname.com/fhs/pub/fhs-2.3.html][Filesystem Hierarchy Standard]] を参考にしている。

#+BEGIN_SRC emacs-lisp
(defvar my-etc-dir (my-dpath-ued "etc"))
(defvar my-lib-dir (my-dpath-ued "lib"))
(defvar my-opt-dir (my-dpath-ued "opt"))
(defvar my-var-dir (my-dpath-ued "var"))

(provide 'my-setup-essentials)
;;; my-setup-essentials.el ends here
#+END_SRC
