#+STARTUP: showall

#+BEGIN_SRC emacs-lisp
(require 'org)
(require 'org-capture)
(require 'ox-taskjuggler)
(require 'ox-md)
(require 'ox-confluence)

(defvar my:org-directory (expand-file-name "~/Dropbox/org/"))
(defvar my:org-schedule-file (expand-file-name "schedule.org" my:org-directory))
(defvar my:org-journal-dir (expand-file-name "journal/" my:org-directory))

(custom-set-variables
 '(org-adapt-indentation nil)
 `(org-directory ,my:org-directory)
 '(org-agenda-files `(,org-directory))
 `(org-default-notes-file ,(expand-file-name "notes.org" org-directory))
 '(org-return-follows-link t)
 '(org-startup-truncated nil)
 '(org-agenda-include-diary t)
 '(org-agenda-custom-commands
   `(("h" "Schedule" agenda nil
      ((org-agenda-files (list ,my:org-schedule-file))))
     ("j" . "JOURNAL")
     ("ja" "Journal Agenda" agenda nil
      ((org-agenda-files (list ,my:org-journal-dir))))
     ("jt" "Journal TODO" todo nil
      ((org-agenda-files (list ,my:org-journal-dir))))
     ("js" "Journal Search" search nil
      ((org-agenda-files (list ,my:org-journal-dir))))))
 '(org-capture-templates
   `(("t" "Todo" entry
      (file ,(expand-file-name "todo.org" org-directory))
      "* TODO <%<%Y-%m-%d %H:%M>> %?\n%i\n\n"
      :kill-buffer t)
     ("s" "Schedule" entry
      (file ,my:org-schedule-file)
      "* <%<%Y-%m-%d %H:%M>> %?\n%i\n\n"
      :kill-buffer t)
     ("j" "Journal" entry
      (file+datetree ,(expand-file-name (format (format-time-string "journal-%Y-%%s.org") (system-name)) my:org-journal-dir))
      "* %?\n%T\n%i"
      :prepend t
      :empty-lines 1
      :jump-to-captured t)))
 '(org-taskjuggler-default-global-properties "")
 '(org-src-window-setup 'current-window)
 '(org-html-htmlize-output-type 'css))

;; cf. http://emacs.stackexchange.com/a/13828
(setcar (nthcdr 2 org-emphasis-regexp-components) " \t\r\n")
(org-set-emph-re 'org-emphasis-regexp-components org-emphasis-regexp-components)

;;; journal
(defun my:org-journal-new-entry (&optional goto)
  (interactive "P")
  (cond
   ((equal goto '(4)) (org-capture-goto-target "j"))
   (t (org-capture nil "j"))))
(define-key global-map (kbd "C-c C-j") 'my:org-journal-new-entry)
(define-key org-mode-map (kbd "C-c C-j") 'my:org-journal-new-entry)

(defun my:org-mode-hook ()
  (set (make-local-variable 'system-time-locale) "C")
  (org-display-inline-images))

(add-hook 'org-mode-hook #'my:org-mode-hook)

(define-key global-map (kbd "C-c l") 'org-store-link)
(define-key global-map (kbd "C-c c") 'org-capture)
(define-key global-map (kbd "C-c a") 'org-agenda)
(define-key global-map (kbd "C-c b") 'org-iswitchb)

(eval-after-load "ox"
  (custom-set-variables
   '(org-export-allow-bind-keywords t)
   '(org-export-date-timestamp-format "%M")))
#+END_SRC

* org-ac

#+BEGIN_SRC emacs-lisp
(require 'org-ac)
(org-ac/config-default)
#+END_SRC

* EOF

#+BEGIN_SRC emacs-lisp
;; Local Variables:
;; byte-compile-warnings: (not unresolved free-vars)
;; End:
#+END_SRC
