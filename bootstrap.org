#+STARTUP: showall
* Emacsの起動処理

** 必要最低限の各種定義情報をロード
#+BEGIN_SRC emacs-lisp :padline no
;;; -*- coding: utf-8; lexical-binding: t -*-
(require 'cl-lib)
(require 'org)

(let* ((etc-dir (expand-file-name "etc/" user-emacs-directory))
       (essentials (expand-file-name "my-setup-essentials.org" etc-dir)))
  (add-to-list 'load-path etc-dir)
  (org-babel-load-file essentials))
#+END_SRC

** =PATH= の設定
MacOS X の場合には適切に =PATH= を設定してやる必要がある。

#+BEGIN_SRC emacs-lisp
(when (eq window-system 'ns) (my-set-exec-path-from-shell-PATH))
#+END_SRC

** el-get の設定
#+BEGIN_SRC emacs-lisp
(setq el-get-git-install-url "https://github.com/dimitri/el-get.git")
(setq el-get-github-default-url-type "https")
(setq el-get-verbose t)

(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))

(add-to-list 'el-get-recipe-path (my-expand-dir-name "recipes" my-etc-dir))

(defun my-el-get-sync (packages &optional num)
  "(el-get 'sync PACKAGES) 失敗時に `NUM' 回までリトライする"
  (let* ((num (or num 5))
         (trial (number-sequence 1 num)))
    (while trial
      (condition-case err-var
          (progn
            (el-get 'sync packages)
            (setq trial nil))
        (error
         (message "Trial %d: failed with: %s" (car trial) err-var)
         (setq trial (cdr trial))
         (if trial
             (sleep-for (car trial))
           (error "el-get failed with: %s" err-var)))))))
#+END_SRC

** 必要最小限のパッケージをインスト―ル
#+BEGIN_SRC emacs-lisp
(require 'package)
(custom-set-variables
 `(package-user-dir ,(my-expand-dir-name "elpa" my-opt-dir))
 '(package-archives '(("melpa" . "http://melpa.org/packages/")
                      ("gnu" . "http://elpa.gnu.org/packages/")
                      ("tromey" . "http://tromey.com/elpa/")
                      ("marmalade" . "http://marmalade-repo.org/packages/"))))
(package-initialize)

(defvar my-essential-packages '(dash el-get f ht org-mode package s use-package))
(my-el-get-sync my-essential-packages)
#+END_SRC

** その他のパッケージのインストール
#+BEGIN_SRC emacs-lisp
(org-babel-load-file (expand-file-name "my-packages.org" my-etc-dir))
(my-el-get-sync my-packages)
#+END_SRC

** テーマの適用
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path (my-expand-dir-name "themes" my-opt-dir))
(load-theme 'hc-zenburn t)
#+END_SRC

** 独自ライブラリのロード・設定
#+BEGIN_SRC emacs-lisp
(my-add-to-load-path my-lib-dir)
(org-babel-load-file (expand-file-name "my-org-babel-tangle-and-byte-recompile-file.org" my-lib-dir))
(my-org-babel-tangle-and-byte-recompile-dir my-lib-dir)
#+END_SRC

** init-loader による初期化

#+BEGIN_SRC emacs-lisp
(require 'init-loader)
(custom-set-variables
 `(init-loader-directory ,(my-expand-dir-name "init.d" my-etc-dir))
 `(init-loader-show-log-after-init t)
 `(init-loader-byte-compile nil))

(my-org-babel-tangle-and-byte-recompile-dir (my-expand-dir-name "init.org" my-etc-dir)
                                            :fn (lambda (f) (not (s-match "README" (f-filename f))))
                                            :dest init-loader-directory)

(init-loader-load)
;; boostrap.el ends here
#+END_SRC
